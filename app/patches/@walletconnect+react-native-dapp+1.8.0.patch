diff --git a/node_modules/@walletconnect/react-native-dapp/dist/constants/defaultRenderQrcodeModal.js b/node_modules/@walletconnect/react-native-dapp/dist/constants/defaultRenderQrcodeModal.js
index da0e873..fe81e18 100644
--- a/node_modules/@walletconnect/react-native-dapp/dist/constants/defaultRenderQrcodeModal.js
+++ b/node_modules/@walletconnect/react-native-dapp/dist/constants/defaultRenderQrcodeModal.js
@@ -1,4 +1,4 @@
 import * as React from 'react';
 import { QrcodeModal } from '../components';
-const defaultRenderQrcodeModal = (props) => React.createElement(QrcodeModal, { ...props, division: 4 });
+const defaultRenderQrcodeModal = (props) => React.createElement(QrcodeModal, { ...props, division: 5 });
 export default defaultRenderQrcodeModal;
diff --git a/node_modules/@walletconnect/react-native-dapp/dist/providers/WalletConnectProvider.js b/node_modules/@walletconnect/react-native-dapp/dist/providers/WalletConnectProvider.js
index 9b5b1e2..1eb3dc4 100644
--- a/node_modules/@walletconnect/react-native-dapp/dist/providers/WalletConnectProvider.js
+++ b/node_modules/@walletconnect/react-native-dapp/dist/providers/WalletConnectProvider.js
@@ -8,18 +8,21 @@ import { defaultRenderQrcodeModal, formatWalletServiceUrl } from '../constants';
 import { WalletConnectContext } from '../contexts';
 import { useMobileRegistry, useWalletConnectContext } from '../hooks';
 import { ConnectorEvents, } from '../types';
+
+import Web3Provider from "@walletconnect/web3-provider";
+
 const defaultState = Object.freeze({
     visible: false,
 });
+
 export default function WalletConnectProvider({ children, renderQrcodeModal: maybeRenderQrcodeModal, ...extras }) {
     const { error: walletServicesError, data: walletServices } = useMobileRegistry();
     const [state, setState] = React.useState(defaultState);
     const parentContext = useWalletConnectContext();
     const intermediateValue = React.useMemo(() => deepmerge(parentContext, extras), [parentContext, extras]);
-    const renderQrcodeModal = React.useMemo(() => (typeof maybeRenderQrcodeModal === 'function'
-        ? maybeRenderQrcodeModal
-        : defaultRenderQrcodeModal), [maybeRenderQrcodeModal]);
+
     const open = React.useCallback(async (uri, cb) => {
+
         if (Platform.OS === 'android') {
             const canOpenURL = await Linking.canOpenURL(uri);
             if (!canOpenURL) {
@@ -77,7 +80,10 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
         }
         return Promise.reject(new Error('Unable to open url.'));
     }, [walletServiceStorageKey, storage, redirectUrl, state]);
+
     const [connector, setConnector] = React.useState();
+    const [web3Provider, setWeb3Provider] = React.useState();
+
     const createConnector = React.useCallback(async function shouldCreateConnector(params) {
         const { storageOptions: _storageOptions, ...extras } = params;
         const [maybeExistingSession, maybeExistingWalletService,] = await Promise.all([
@@ -96,16 +102,19 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
             qrcodeModal,
             ...extras,
         });
+
         const maybeThrowError = (error) => {
             if (error) {
                 throw error;
             }
         };
-        nextConnector.on(ConnectorEvents.CONNECT, async (error) => {
+
+        const connectionListener = async (error) => {
             maybeThrowError(error);
             await storage.setItem(sessionStorageKey, nextConnector.session);
-        });
-        nextConnector.on(ConnectorEvents.CALL_REQUEST_SENT, async (error) => {
+        };
+
+        const requestListener = async (error) => {
             maybeThrowError(error);
             if (Platform.OS === 'android') {
                 const { peerMeta } = nextConnector;
@@ -135,20 +144,43 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
                 const url = formatWalletServiceUrl(walletService);
                 return (await Linking.canOpenURL(url)) && Linking.openURL(url);
             }
-        });
-        nextConnector.on(ConnectorEvents.SESSION_UPDATE, async (error) => {
+        };
+
+        const updateSesionListener = async (error) => {
             maybeThrowError(error);
             await storage.setItem(sessionStorageKey, nextConnector.session);
-        });
-        nextConnector.on(ConnectorEvents.DISCONNECT, async (error) => {
+        };
+
+        const disconnectListener = async (error) => {
             await Promise.all([
                 storage.setItem(sessionStorageKey, undefined),
                 storage.setItem(walletServiceStorageKey, undefined),
             ]);
-            setConnector(await shouldCreateConnector(params));
+
+            const { connector, web3Provider }  = await shouldCreateConnector(params)
+
+            setConnector(connector);
+            setWeb3Provider(web3Provider);
             maybeThrowError(error);
+        }
+
+        const web3Provider = new Web3Provider({ ...params, rpc: {
+            43113: 'https://api.avax.network/ext/bc/C/rpc',
+            } 
         });
-        return nextConnector;
+
+
+        nextConnector.on(ConnectorEvents.CONNECT, connectionListener);
+        nextConnector.on(ConnectorEvents.CALL_REQUEST_SENT, requestListener);
+        nextConnector.on(ConnectorEvents.SESSION_UPDATE, updateSesionListener);
+        nextConnector.on(ConnectorEvents.DISCONNECT, disconnectListener);
+
+        web3Provider.wc.on(ConnectorEvents.CONNECT, connectionListener);
+        web3Provider.wc.on(ConnectorEvents.CALL_REQUEST_SENT, requestListener);
+        web3Provider.wc.on(ConnectorEvents.SESSION_UPDATE, updateSesionListener);
+        web3Provider.wc.on(ConnectorEvents.DISCONNECT, disconnectListener);
+
+        return { nextConnector, web3Provider };
     }, [
         sessionStorageKey,
         walletServiceStorageKey,
@@ -159,13 +191,19 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
     ]);
     useDeepCompareEffect(() => {
         (async () => {
-            setConnector(await createConnector(intermediateValue));
+            const { nextConnector, web3Provider } = await createConnector(intermediateValue);
+            
+            setConnector(nextConnector);
+            setWeb3Provider(web3Provider);
         })();
     }, [setConnector, createConnector, intermediateValue]);
     const onDismiss = React.useCallback(() => {
         close();
         (async () => {
-            setConnector(await createConnector(intermediateValue));
+            const { nextConnector, web3Provider } = await createConnector(intermediateValue);
+            
+            setConnector(nextConnector);
+            setWeb3Provider(web3Provider);
         })();
     }, [close, setConnector, createConnector, intermediateValue]);
     const modalProps = React.useMemo(() => ({
@@ -196,8 +234,9 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
                         else if (walletServicesError) {
                             throw walletServicesError;
                         }
-                        const nextConnector = await createConnector(intermediateValue);
+                        const { nextConnector, web3Provider } = await createConnector(intermediateValue);
                         setConnector(nextConnector);
+                        setWeb3Provider(web3Provider);
                         return nextConnector.connect(opts);
                     },
                 }),
@@ -218,7 +257,9 @@ export default function WalletConnectProvider({ children, renderQrcodeModal: may
         walletServices,
         walletServicesError,
     ]);
-    return (React.createElement(WalletConnectContext.Provider, { value: value },
-        !!children && children,
-        Platform.OS !== 'android' && renderQrcodeModal(modalProps)));
+    return (
+        <WalletConnectContext.Provider value={value}>
+            {!!children && children}
+        </WalletConnectContext.Provider>
+    );
 }
